# User Migration Project - Cursor Rules

## CRITICAL: Source File Protection

- **NEVER** edit, modify, update, add, or delete anything in `users.csv`
- **NEVER** run scripts that modify `users.csv` directly
- **NEVER** use tools like `search_replace`, `write`, or `MultiEdit` on `users.csv`
- **NEVER** delete or overwrite `users.csv`
- **NEVER** create temporary scripts that modify `users.csv`

## Source File Rules

- `users.csv` is the **SOURCE OF TRUTH** - it must remain unchanged
- Only **READ** from `users.csv` using `read_file` or similar read-only operations
- All data transformations must happen in `main.py` or other processing scripts
- The source file is immutable and protected

## Allowed Operations

- ‚úÖ Read from `users.csv` to understand structure
- ‚úÖ Modify `main.py` to handle new columns and transformations
- ‚úÖ Generate `new_users.csv` as output
- ‚úÖ Create temporary processing scripts (but delete them after use)
- ‚úÖ Add new columns in the processing logic, not in the source file

## Workflow Requirements

1. **Source**: `users.csv` (READ-ONLY)
2. **Processing**: `main.py` (can be modified)
3. **Output**: `new_users.csv` (generated file)

## Column Handling Strategy

- If new columns are needed, add them in `main.py` processing logic
- Use conditional checks to add missing columns with default values
- Never modify the source CSV structure directly
- All transformations must be done programmatically in the script

## File Protection Examples

‚ùå **FORBIDDEN:**

- `search_replace` on `users.csv`
- `write` to `users.csv`
- `MultiEdit` on `users.csv`
- Any script that modifies `users.csv`
- Deleting or overwriting `users.csv`

‚úÖ **ALLOWED:**

- `read_file` on `users.csv`
- Modifying `main.py`
- Generating `new_users.csv`
- Creating temporary processing scripts (delete after use)

## Error Prevention

- If asked to modify `users.csv`, redirect to modifying `main.py` instead
- Always explain that `users.csv` is the source and cannot be changed
- Suggest adding column handling logic to `main.py` instead
- Ensure all data transformations are done in the processing script

## Summary

- **Source**: `users.csv` (immutable)
- **Processor**: `main.py` (modifiable)
- **Output**: `new_users.csv` (generated)
- **Rule**: Never touch the source, always process through the script

---

## CRITICAL: CSV Generation & Execution Restrictions

### STRICT RULES: Never Auto-Generate CSV Files

- **NEVER** run `main.py --generate` commands without explicit user instruction
- **NEVER** execute scripts that generate CSV files (`new_users.csv`, `new_purchases.csv`, `new_discount_codes.csv`, `new_platform_accounts.csv`) unless user explicitly requests generation
- **NEVER** automatically run `uv run main.py --generate` or similar commands
- **NEVER** use `--generate` flag unless user specifically asks to generate files
- **ALWAYS** ask for confirmation before running any CSV generation command

### Preview vs Generate

- ‚úÖ **ALLOWED WITHOUT ASKING**: Preview commands (without `--generate` flag)

  - `uv run main.py --users`
  - `uv run main.py --purchases`
  - `uv run main.py --discounts`
  - `uv run main.py --platform-accounts`

- ‚ùå **FORBIDDEN WITHOUT EXPLICIT USER REQUEST**: Generate commands
  - `uv run main.py --generate --users`
  - `uv run main.py --generate --purchases`
  - `uv run main.py --generate --discounts`
  - `uv run main.py --generate --platform-accounts`
  - `uv run main.py --generate --all`

### CSV File Protection

**All CSV files in `csv/` folder are READ-ONLY:**

- `csv/users.csv` (immutable source)
- `csv/purchases.csv` (immutable source)
- `csv/discount_codes.csv` (immutable source)
- `csv/mt5_users.csv` (immutable source)
- `csv/platform_groups.csv` (immutable source)

**Generated CSV files should only be created when explicitly requested:**

- `new_users.csv`
- `new_purchases.csv`
- `new_discount_codes.csv`
- `new_platform_accounts.csv`
- `new_platform_groups.csv`

### When User Requests CSV Generation

**User must explicitly say:**

- "Generate the CSV file"
- "Run the export with --generate"
- "Create the output file"
- "Execute the generation command"

**ALWAYS confirm before executing:**

```
User wants to generate [table_name].
Running: uv run main.py --generate --[flag]
This will create/overwrite new_[table_name].csv
```

### Examples

‚ùå **FORBIDDEN (without explicit request):**

```bash
# User: "Let's check if the users export works"
# AI: Running `uv run main.py --generate --users`  ‚Üê WRONG!
```

‚úÖ **CORRECT APPROACH:**

```bash
# User: "Let's check if the users export works"
# AI: Running `uv run main.py --users` (preview only)  ‚Üê CORRECT!
```

‚ùå **FORBIDDEN (without explicit request):**

```bash
# User: "Test the platform accounts export"
# AI: Running `uv run main.py --generate --platform-accounts`  ‚Üê WRONG!
```

‚úÖ **CORRECT APPROACH:**

```bash
# User: "Test the platform accounts export"
# AI: Running `uv run main.py --platform-accounts` (preview only)  ‚Üê CORRECT!
```

‚úÖ **CORRECT (with explicit request):**

```bash
# User: "Generate all CSV files"
# AI: Confirmed. Running `uv run main.py --generate --all`  ‚Üê CORRECT!
```

### Safety Guidelines

1. **Default to Preview Mode**: Always use preview mode (no `--generate`) unless explicitly told to generate
2. **Ask for Confirmation**: When user asks to "generate" or "create" files, confirm the command before executing
3. **Explain Impact**: Inform user that generation will create/overwrite files (can be large, 100+ MB)
4. **Size Awareness**: Generated files can be very large (users: 21MB, purchases: 127MB, etc.)

### Summary of Generation Rules

- üö´ **NEVER** auto-run `--generate` commands
- üö´ **NEVER** create CSV files without explicit user request
- ‚úÖ **ALWAYS** use preview mode by default
- ‚úÖ **ALWAYS** ask for confirmation before generating large files
- ‚úÖ **ONLY** generate when user explicitly requests: "generate", "create", "export to file"
